// Code generated by go-bindata. DO NOT EDIT.
// sources:
// source.html (348B)
// stylesheet.css (588B)

package templates

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sourceHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\x41\x6b\xf2\x40\x18\x84\xef\xfe\x8a\x71\xcf\x5f\xe2\x77\xef\x26\x50\x34\xed\x45\x4d\x89\x91\xd2\xa3\x26\x13\x36\xb8\xee\xda\xcd\x6b\x35\x88\xff\xbd\xd8\x20\xb5\xa7\xe1\x7d\xe7\x81\x81\x47\x8f\x67\xf9\xb4\xfc\x78\xcb\x60\x64\x6f\xd3\x91\xbe\x07\x37\x75\x3a\x02\x00\x2d\xad\x58\xa6\x73\xef\x77\x38\x19\x0f\xeb\xfd\xae\x43\x7d\xdc\x6f\xff\xc1\xf9\x53\x1c\xc7\x7a\x32\x20\x03\x3e\x8e\x22\x14\x6c\x18\xe8\x2a\x42\x0c\xc1\xb3\x30\xb8\x8d\xc5\x74\xb5\x42\xd3\x5a\x22\x8a\x1e\xe0\x69\xbe\x58\x64\xcb\x32\x9b\x21\x5f\x97\x78\xc9\x0b\x2c\xf3\x77\xfd\xd3\xdb\xd6\xed\x10\x68\x13\xd5\x49\x6f\xd9\x19\x52\x14\xa4\x3f\x30\x51\xc2\xb3\x4c\xaa\xae\x53\x30\x81\xcd\x23\x11\xdf\xbe\xc3\xc0\x9f\xa1\xc0\xba\x0d\xac\xa4\xf5\xee\xb7\xd8\x53\x36\x30\x22\x87\x88\x9f\xc7\xf6\x2b\x51\x81\x4d\x60\x67\x14\x2a\xef\x84\x4e\x12\xf5\xff\xe9\x18\x6c\x72\xb9\xa0\x7c\x2e\x5e\xb3\x12\xeb\x62\x8e\xeb\x55\xa5\x23\x3d\x19\x34\xe9\xad\xaf\xfb\xdb\x79\xcf\x41\xe2\x77\x00\x00\x00\xff\xff\xd7\xd3\xaa\x3c\x5c\x01\x00\x00")

func sourceHtmlBytes() ([]byte, error) {
	return bindataRead(
		_sourceHtml,
		"source.html",
	)
}

func sourceHtml() (*asset, error) {
	bytes, err := sourceHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "source.html", size: 348, mode: os.FileMode(0644), modTime: time.Unix(1697932643, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb1, 0x5a, 0x93, 0x4, 0xd0, 0xf1, 0xca, 0xd4, 0x48, 0xe2, 0x2e, 0x43, 0x26, 0xab, 0x36, 0xe8, 0x9a, 0xd0, 0x1d, 0xa8, 0x29, 0x8c, 0x1c, 0xfb, 0x68, 0x52, 0x3, 0x2c, 0x4a, 0xb0, 0xbb, 0x99}}
	return a, nil
}

var _stylesheetCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x91\xc1\x4e\xc3\x30\x0c\x86\xef\x7d\x0a\x4b\x15\x97\x89\xb2\xb2\x5e\x50\x76\xe2\x51\xdc\xc4\x69\x2d\x32\xa7\x4a\xb2\xd1\x0a\xf1\xee\x68\x4b\x56\x69\x8c\x0b\x87\x1d\x6d\xfd\xdf\xef\xaf\xcd\x76\x03\x31\x2d\x8e\xe2\x8b\x8e\x11\x36\xdb\xaa\xf7\x66\x81\xaf\x0a\x00\xe0\x80\x61\x60\x51\xd0\xee\x2f\xe3\x84\xc6\xb0\x0c\xeb\x6c\xbd\xa4\xc6\xe2\x81\xdd\xa2\xe0\x3d\x30\xba\x67\x88\x28\xb1\x89\x14\xd8\xee\xab\xef\xaa\xaa\x47\x42\x43\xa1\xf4\xf5\xa8\x3f\x86\xe0\x8f\x62\x1a\xed\x9d\x0f\x0a\xea\xae\xeb\x72\xd9\x75\x61\xad\xcd\x8b\x44\x73\x6a\xd0\xf1\x20\x0a\x34\x49\xa2\xf0\xcb\xe2\xb5\x9d\xe6\x7c\x44\x7b\x49\xc8\xb2\xde\x31\x1c\x27\x87\x8b\x02\xeb\x68\xce\xd4\x27\x9b\x34\x9e\x99\xf6\x29\x33\x82\x27\x1e\x30\xb1\x97\x02\x95\xc4\xee\x1c\xf8\xb7\xec\x2a\xb5\xbb\x91\x22\x49\xb7\xed\x6f\xd7\xf6\x7b\x00\x4b\xf2\xef\x1f\x61\x48\xfb\x70\xd1\x55\x20\x5e\x28\x23\x6a\xf4\xa7\xf5\xab\xef\x72\x47\x31\x14\x1c\x97\x70\xdd\xa3\xc8\x63\x9f\xe2\x27\x00\x00\xff\xff\x29\x28\xb4\x05\x4c\x02\x00\x00")

func stylesheetCssBytes() ([]byte, error) {
	return bindataRead(
		_stylesheetCss,
		"stylesheet.css",
	)
}

func stylesheetCss() (*asset, error) {
	bytes, err := stylesheetCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stylesheet.css", size: 588, mode: os.FileMode(0644), modTime: time.Unix(1697903456, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf2, 0x11, 0xd2, 0xf4, 0xc5, 0xd1, 0x45, 0x6c, 0x3e, 0xa2, 0x2a, 0x9b, 0xb5, 0x5f, 0x63, 0x5a, 0x39, 0xfd, 0xce, 0x64, 0x76, 0x4a, 0x3c, 0x4, 0x4c, 0x3a, 0xb7, 0x4f, 0xe7, 0xc7, 0xdc, 0x1c}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"source.html":    sourceHtml,
	"stylesheet.css": stylesheetCss,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"source.html":    {sourceHtml, map[string]*bintree{}},
	"stylesheet.css": {stylesheetCss, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
